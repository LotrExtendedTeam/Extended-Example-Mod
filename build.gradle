buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
		classpath 'org.parchmentmc:librarian:1.+'
    }
}
plugins {
    id 'idea'
    id 'com.diffplug.eclipse.apt' version '3.35.0'
    id 'net.minecraftforge.gradle' version '5.1.+'
    // This should be below the net.minecraftforge.gradle plugin
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'org.spongepowered.mixin'

version = '1.0.0'
group = 'com.examplemod' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'examplemod'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {

    mappings channel: 'parchment', version: '2022.03.06-1.16.5'

	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'examplemod', '--all', '--existing-mod', 'lotr', '--existing-mod', 'lotrextended', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
	flatDir {
        dirs 'libs'
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.39'
    // Renewed 5.5
    implementation fg.deobf("curse.maven:the-lord-of-the-rings-mod-renewed-406893:3661524")
    // Renewed Extended 1.7.4
    implementation fg.deobf("curse.maven:lotr-renewed-extended-954566:6603102")
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}


// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }
sourceSets {
    def deps = [
		configurations.minecraft,
		//configurations.compile,
		configurations.compileClasspath,
		configurations.runtimeClasspath
	]
	main {
		compileClasspath += files(deps)
        ext.refMap = "mixins.examplemod.refmap.json"
	}
}

// Configure resource processing
project.processResources {
	from (sourceSets.main.resources.srcDirs) {
		include 'META-INF/mods.toml'
		duplicatesStrategy = DuplicatesStrategy.INCLUDE
		expand (
			'version': version
		)
	}
}

mixin {
    add sourceSets.main, "mixin.examplemod.refmap.json"

    config 'mixin.examplemod.json'
    disableTargetValidator = false
    overwriteErrorLevel = 'error'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "ExampleMod",
            "Specification-Vendor": "ExampleMod",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"ExampleMod",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "mixin.examplemod.json"
        ])
    }
}

reobf {
	jar{}
}
